-- Create the database
CREATE DATABASE MovieTicketBooking;

-- Use the created database
USE MovieTicketBooking;

-- Customer table
CREATE TABLE Customer (
    CID INT AUTO_INCREMENT PRIMARY KEY,
    C_name VARCHAR(255) NOT NULL,
    password VARCHAR(255) NOT NULL,
    Email_ VARCHAR(255) NOT NULL UNIQUE,
    Phone_no VARCHAR(15) NOT NULL
);

-- Shows table
CREATE TABLE Shows (
    Show_id INT AUTO_INCREMENT PRIMARY KEY,
    St_name TIMESTAMP NOT NULL,
    End_time TIMESTAMP NOT NULL,
    Language VARCHAR(50) NOT NULL
);

-- Movie table
CREATE TABLE Movie (
    m_id INT AUTO_INCREMENT PRIMARY KEY,
    M_name VARCHAR(255) NOT NULL,
    Duration INT NOT NULL, -- Duration in minutes
    Rating DECIMAL(2, 1) -- Rating out of 10
);

-- Theatre table
CREATE TABLE Theatre (
    t_id INT AUTO_INCREMENT PRIMARY KEY,
    t_name VARCHAR(255) NOT NULL,
    t_location VARCHAR(255) NOT NULL
);

-- Tickets table
CREATE TABLE Tickets (
    ticket_no INT AUTO_INCREMENT PRIMARY KEY,
    seat_no VARCHAR(10) NOT NULL,
    Show_id INT,
    t_id INT,
    m_id INT,
    c_id INT,
    FOREIGN KEY (Show_id) REFERENCES Shows(Show_id),
    FOREIGN KEY (t_id) REFERENCES Theatre(t_id),
    FOREIGN KEY (m_id) REFERENCES Movie(m_id),
    FOREIGN KEY (c_id) REFERENCES Customer(CID)
);

-- Insert sample customers
INSERT INTO Customer (C_name, password, Email_, Phone_no) VALUES 
('John Doe', 'password123', 'john@example.com', '1234567890'),
('Jane Smith', 'password456', 'jane@example.com', '0987654321');

-- Insert sample movies
INSERT INTO Movie (M_name, Duration, Rating) VALUES 
('The Matrix', 136, 8.7),
('Inception', 148, 8.8);

-- Insert sample theatres
INSERT INTO Theatre (t_name, t_location) VALUES 
('Cinema One', '123 Main St'),
('Cinema Two', '456 Elm St');

-- Insert sample shows
INSERT INTO Shows (St_name, End_time, Language) VALUES 
('2024-05-20 18:00:00', '2024-05-20 20:16:00', 'English'),
('2024-05-20 20:00:00', '2024-05-20 22:28:00', 'English');

-- Insert sample tickets
INSERT INTO Tickets (seat_no, Show_id, t_id, m_id, c_id) VALUES 
('A1', 1, 1, 1, 1),
('B1', 2, 2, 2, 2);

-- Query: Find the movie with the highest average rating
SELECT M_name AS Highest_Rated_Movie
FROM Movie
WHERE Rating = (SELECT MAX(Rating) FROM Movie);

-- Query: Calculate the total revenue generated by each movie
SELECT M.M_name AS Movie_Name, SUM(T.Price) AS Total_Revenue
FROM Movie M
JOIN Shows S ON M.m_id = S.m_id
JOIN Tickets T ON S.Show_id = T.Show_id
GROUP BY M.M_name;

-- Query: List the movies currently showing at each theatre along with the total number of tickets sold for each movie
SELECT T.t_name AS Theatre_Name, M.M_name AS Movie_Name, COUNT(Ti.ticket_no) AS Tickets_Sold
FROM Theatre T
JOIN Shows S ON T.t_id = S.t_id
JOIN Movie M ON S.m_id = M.m_id
LEFT JOIN Tickets Ti ON S.Show_id = Ti.Show_id
GROUP BY T.t_name, M.M_name;

-- Additional Query: List all shows for a given movie title
SELECT S.Show_id, T.t_name AS Theatre_Name, S.St_name, S.End_time, S.Language
FROM Shows S
JOIN Theatre T ON S.t_id = T.t_id
JOIN Movie M ON S.m_id = M.m_id
WHERE M.M_name = 'The Matrix';

-- Additional Query: Find all customers who have booked tickets for a specific show
SELECT C.CID, C.C_name, C.Email_, C.Phone_no
FROM Customer C
JOIN Tickets T ON C.CID = T.c_id
WHERE T.Show_id = 1;

-- Additional Query: List all movies with their respective showtimes and theatres
SELECT M.M_name, S.St_name, S.End_time, T.t_name AS Theatre_Name
FROM Movie M
JOIN Shows S ON M.m_id = S.m_id
JOIN Theatre T ON S.t_id = T.t_id;

-- Additional Query: List all available seats for a specific show
SELECT seat_no
FROM Tickets
WHERE Show_id = 1 AND c_id IS NULL;

-- Creating the view to display movies with their average ratings
CREATE VIEW MovieAverageRating AS
SELECT M.M_name AS Movie_Name, AVG(M.Rating) AS Average_Rating
FROM Movie M
JOIN Shows S ON M.m_id = S.m_id
GROUP BY M.M_name;

-- Creating the view to list the top 3 busiest theatres by total tickets sold
CREATE VIEW TopTheatres AS
SELECT T.t_id, T.t_name AS Theatre_Name, T.t_location AS Location, COUNT(Ti.ticket_no) AS Total_Tickets_Sold
FROM Theatre T
JOIN Shows S ON T.t_id = S.t_id
LEFT JOIN Tickets Ti ON S.Show_id = Ti.Show_id
GROUP BY T.t_id, T.t_name, T.t_location
ORDER BY Total_Tickets_Sold DESC
LIMIT 3;
